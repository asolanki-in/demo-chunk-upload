#!/bin/bash

# Configuration
OUTPUT_DIR="launch_traces"
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Function to get available devices
list_devices() {
    echo -e "${BLUE}Available devices:${NC}"
    xcrun xctrace list devices
}

# Function to measure launch time
measure_launch_time() {
    local app_path="$1"
    local device_id="$2"
    local bundle_id="$3"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local trace_file="$OUTPUT_DIR/launch_trace_${timestamp}.trace"

    echo -e "${GREEN}Starting measurement...${NC}"
    echo -e "${BLUE}App: $bundle_id${NC}"
    echo -e "${BLUE}Device: $device_id${NC}"
    echo -e "${BLUE}Output: $trace_file${NC}"

    # Terminate app if running
    if [[ "$device_id" == "booted" ]]; then
        xcrun simctl terminate "$device_id" "$bundle_id" 2>/dev/null
    fi

    # Record launch trace
    xcrun xctrace record \
        --device "$device_id" \
        --template 'App Launch' \
        --output "$trace_file" \
        --launch "$app_path" \
        --time-limit 10s \
        --maximum-samples 10

    echo -e "${GREEN}Measurement complete${NC}"
    echo -e "${BLUE}Analyzing trace file...${NC}"

    # Analyze the trace file
    xcrun xctrace analyze "$trace_file"
}

# Function to get bundle ID from app
get_bundle_id() {
    local app_path="$1"
    /usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$app_path/Info.plist"
}

# Main script
main() {
    echo -e "${GREEN}iOS App Launch Time Profiler using xctrace${NC}"
    echo -e "${GREEN}======================================${NC}"

    # Check if app path is provided
    if [ "$#" -ne 1 ]; then
        echo "Usage: $0 <path-to-app>"
        exit 1
    fi

    APP_PATH="$1"

    # Verify app path exists
    if [ ! -d "$APP_PATH" ]; then
        echo "Error: App path does not exist: $APP_PATH"
        exit 1
    fi

    # Get bundle ID
    BUNDLE_ID=$(get_bundle_id "$APP_PATH")
    if [ -z "$BUNDLE_ID" ]; then
        echo "Error: Could not extract bundle identifier"
        exit 1
    fi

    # List available devices
    list_devices

    # Get device selection
    read -p "Enter device ID (or press enter for booted simulator): " DEVICE_ID
    DEVICE_ID=${DEVICE_ID:-"booted"}

    # Run measurement
    measure_launch_time "$APP_PATH" "$DEVICE_ID" "$BUNDLE_ID"

    echo -e "\n${GREEN}Trace files are saved in $OUTPUT_DIR directory${NC}"
}

main "$@"